<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\batt_lvl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\batt_lvl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu Sep 19 01:55:31 2019
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; read_adc &rArr; printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[11]">BLE_CRYPT_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[9]">BLE_CSCNT_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[b]">BLE_ERROR_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[d]">BLE_EVENT_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[7]">BLE_FINETGTIM_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[8]">BLE_GROSSTGTIM_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[10]">BLE_RADIOCNTL_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[c]">BLE_RX_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[a]">BLE_SLP_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[19]">GPIO0_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1a]">GPIO1_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1b]">GPIO2_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1c]">GPIO3_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1d]">GPIO4_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from per_ex_hard_fault.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[14]">I2C_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[17]">KEYBRD_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[18]">RFCAL_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[15]">SPI_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[e]">SWTIM_Handler</a> from pwm.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_armcm0.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[13]">UART2_Handler</a> from uart2.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[12]">UART_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[f]">WKUP_QUADEC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from boot_vectors.o(.text)
 <LI><a href="#[21]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[68]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[70]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BLE_CRYPT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BLE_CSCNT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BLE_ERROR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_EVENT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BLE_FINETGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BLE_GROSSTGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BLE_RADIOCNTL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BLE_RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BLE_SLP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WKUP_QUADEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, per_ex_hard_fault.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIO_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[26]"></a>GPIO_SetInactive</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetInactive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[25]"></a>GPIO_SetActive</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[24]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 46 bytes, Stack size 36 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[72]"></a>GPIO_ConfigurePinPower</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>GPIO_GetPinStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>GPIO_EnableIRQ</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>

<P><STRONG><a name="[74]"></a>GPIO_GetIRQInputLevel</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>GPIO_SetIRQInputLevel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>

<P><STRONG><a name="[2c]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>

<P><STRONG><a name="[75]"></a>GPIO_RegisterCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>GPIOn_Handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[19]"></a>GPIO0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO0_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO1_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO1_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO2_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO2_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO3_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO3_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO4_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO4_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>batt_cal_cr2032</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, battery.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[30]"></a>batt_cal_cr1225</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, battery.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[31]"></a>batt_cal_aaa</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, battery.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[32]"></a>battery_get_lvl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = battery_get_lvl &rArr; adc_get_vbat_sample &rArr; adc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_test
</UL>

<P><STRONG><a name="[35]"></a>adc_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_test
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
</UL>

<P><STRONG><a name="[37]"></a>adc_enable_channel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
</UL>

<P><STRONG><a name="[39]"></a>adc_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
</UL>

<P><STRONG><a name="[38]"></a>adc_get_sample</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>

<P><STRONG><a name="[36]"></a>adc_usDelay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>

<P><STRONG><a name="[34]"></a>adc_get_vbat_sample</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_get_vbat_sample &rArr; adc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_usDelay
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_test
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_lvl
</UL>

<P><STRONG><a name="[33]"></a>adc_calibrate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_usDelay
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_test
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_lvl
</UL>

<P><STRONG><a name="[3a]"></a>uart2_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[3e]"></a>uart2_flow_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_flow_off
</UL>

<P><STRONG><a name="[3c]"></a>uart2_flow_off</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_flow_on
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_is_rx_fifo_empty
</UL>

<P><STRONG><a name="[4b]"></a>uart2_finish_transfers</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart2_finish_transfers
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[76]"></a>uart2_read</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>uart2_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thr_empty_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[13]"></a>UART2_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_Handler &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thr_empty_isr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_rec_error_isr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_rec_data_avail_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>timer0_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[77]"></a>timer0_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>timer0_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>timer0_disable_irq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>SWTIM_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWTIM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>timer2_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_sw_pause
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_pwm_frequency
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_hw_pause
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_enable
</UL>

<P><STRONG><a name="[4a]"></a>printf_byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_finish_transfers
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_word
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
</UL>

<P><STRONG><a name="[4c]"></a>printf_string</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, common_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_finish_transfers
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_test
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_test
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
</UL>

<P><STRONG><a name="[4e]"></a>print_hword</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[4f]"></a>print_word</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[50]"></a>reverse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, common_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[51]"></a>itoa</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, common_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = itoa &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
</UL>

<P><STRONG><a name="[52]"></a>printf_byte_dec</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, common_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = printf_byte_dec &rArr; itoa &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_test
</UL>

<P><STRONG><a name="[53]"></a>adc_test</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_test &rArr; printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>read_adc</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_adc &rArr; printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_usDelay
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>timer_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_sw_pause
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_pwm_frequency
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_pwm2_duty_cycle
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_hw_pause
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tmr_enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tmr_div
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>batt_test</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = batt_test &rArr; printf_byte_dec &rArr; itoa &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_lvl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>system_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; read_adc &rArr; printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_test
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_enable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_usDelay
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[63]"></a>periph_init</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, user_periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = periph_init &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_cal_aaa
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_cal_cr1225
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_cal_cr2032
</UL>

<P><STRONG><a name="[4d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[7c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[65]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[54]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_test
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[80]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5f]"></a>set_tmr_div</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm.o(i.set_tmr_div))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[5e]"></a>set_tmr_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.set_tmr_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[46]"></a>timer2_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm.o(i.timer2_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[47]"></a>timer2_set_hw_pause</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_hw_pause))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[60]"></a>timer2_set_pwm2_duty_cycle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_pwm2_duty_cycle))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[49]"></a>timer2_set_pwm_frequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_pwm_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[48]"></a>timer2_set_sw_pause</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_sw_pause))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>gpioshift16</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetIRQInputLevel
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ
</UL>

<P><STRONG><a name="[2a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ
</UL>

<P><STRONG><a name="[42]"></a>uart2_rec_data_avail_isr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_rec_data_avail_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[41]"></a>uart2_rec_error_isr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_rec_error_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[40]"></a>uart2_thr_empty_isr</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_thr_empty_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
</UL>

<P><STRONG><a name="[3d]"></a>uart2_is_rx_fifo_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_flow_off
</UL>

<P><STRONG><a name="[3b]"></a>NVIC_SetPriority</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[44]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[6a]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[21]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
